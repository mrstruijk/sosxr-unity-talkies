using System.Collections;
using System.Collections.Generic;
using SOSXR.EnhancedLogger;
using UnityEngine;


namespace SOSXR.Talkies
{
    /// <summary>
    ///     A class that keeps track of which pins have been used by the PinController, and sets those LOW after a short time interval
    ///     This to try to keep heat generated by some components to minimum.
    /// </summary>
    [RequireComponent(typeof(PinController))]
    public class SafetyPin : MonoBehaviour
    {
        [SerializeField] [Range(1, 60)] private int m_setLowAfterSeconds = 30;
        [SerializeField] [HideInInspector] private PinController _pinController;
        private readonly float _checkDelay = 1f;

        private readonly List<float> _safetyPin = new();


        private void OnValidate()
        {
            if (_pinController == null)
            {
                _pinController = GetComponent<PinController>();
            }
        }


        private void OnEnable()
        {
            _pinController.OnPinSetEvent += StartTimer;
        }


        private void Start()
        {
            this.Info($"{nameof(SafetyPin)} is initialized. It will turn used pins LOW after {m_setLowAfterSeconds} seconds.");

            StartCoroutine(TimeCheckerCR());
        }


        private void StartTimer(int pinNumber, bool value)
        {
            if (_safetyPin.Count <= pinNumber)
            {
                _safetyPin.AddRange(new float[pinNumber + 1 - _safetyPin.Count]);
            }

            if (!value)
            {
                _safetyPin[pinNumber] = 0;

                return;
            }

            if (_safetyPin[pinNumber] != 0)
            {
                return;
            }

            _safetyPin[pinNumber] = Time.time + m_setLowAfterSeconds;
        }


        private IEnumerator TimeCheckerCR()
        {
            for (;;)
            {
                yield return new WaitForSeconds(_checkDelay);

                for (var i = 0; i < _safetyPin.Count; i++)
                {
                    if (_safetyPin[i] == 0)
                    {
                        continue;
                    }

                    if (_safetyPin[i] <= Time.time)
                    {
                        this.Info($"Setting pin {i} to LOW because it has been too HIGH for too long.");

                        _pinController.SetPin(i, false);
                        _safetyPin[i] = 0;
                    }
                }
            }
        }


        private void HardDisableAllKnownPins()
        {
            for (var i = 0; i < _safetyPin.Count; i++)
            {
                _pinController.SetPin(i, false);
            }
        }


        private void OnDisable()
        {
            HardDisableAllKnownPins();

            _pinController.OnPinSetEvent -= StartTimer;

            StopAllCoroutines();
        }
    }
}